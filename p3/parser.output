Nonterminals useless in grammar

    comparitors
    paramerter_decleration
    multiplicative_expr
    term
    pars
    varibles


Terminals unused in grammar

    SUBTRACTION
    ADD
    MULTIPLY
    DIVIDE
    MOD
    NUMBER
    RRETURN
    INT
    PRT
    COMMA
    L_BRAKET
    R_BRAKET
    ASSIGNMENT
    LESS
    LESS_EQ
    GREATER
    GREATER_EQ
    EQUALITY
    NOT_EQ
    UNKNOWN_TOKEN


Rules useless in grammar

   27 comparitors: LESS
   28            | LESS_EQ
   29            | GREATER
   30            | GREATER_EQ
   31            | EQUALITY
   32            | NOT_EQ

   33 paramerter_decleration: ε

   34 multiplicative_expr: ε

   35 term: ε

   36 pars: ε

   37 varibles: ε


Rules useless in parser due to conflicts

   21 var_assigment: ε

   24 print_statement: ε


State 10 conflicts: 2 reduce/reduce
State 45 conflicts: 2 reduce/reduce
State 46 conflicts: 2 reduce/reduce
State 52 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: function_declerations

    2 function_declerations: function_declerations function_decleration
    3                      | ε

    4 statements: statements statement
    5           | ε

    6 statement: var_decleration SEMICOLON
    7          | var_assigment SEMICOLON
    8          | print_statement SEMICOLON
    9          | return_statement SEMICOLON
   10          | if_statement
   11          | read_statement SEMICOLON
   12          | while_statement
   13          | BREAK SEMICOLON
   14          | CONTINUE SEMICOLON

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

   16 else_statement: ELSE L_CURLY statements R_CURLY
   17               | ε

   18 return_statement: RETURN expression

   19 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY statements R_CURLY

   20 var_decleration: ε

   21 var_assigment: ε

   22 expression: ε

   23 bool_expression: ε

   24 print_statement: ε

   25 read_statement: READ L_PAR expression R_PAR

   26 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements R_CURLY


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SUBTRACTION (258)
    ADD (259)
    MULTIPLY (260)
    DIVIDE (261)
    MOD (262)
    L_PAR (263) 15 19 25 26
    R_PAR (264) 15 19 25 26
    NUMBER <op_value> (265)
    IDENTIFIER <op_value> (266) 19
    RETURN (267) 18
    RRETURN (268)
    INT (269)
    PRT (270)
    FUNC (271) 19
    WHILE (272) 26
    IF (273) 15
    ELSE (274) 16
    BREAK (275) 13
    CONTINUE (276) 14
    READ (277) 25
    SEMICOLON (278) 6 7 8 9 11 13 14
    COMMA (279)
    L_CURLY (280) 15 16 19 26
    R_CURLY (281) 15 16 19 26
    L_BRAKET (282)
    R_BRAKET (283)
    ASSIGNMENT (284)
    LESS (285)
    LESS_EQ (286)
    GREATER (287)
    GREATER_EQ (288)
    EQUALITY (289)
    NOT_EQ (290)
    UNKNOWN_TOKEN (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function_declerations <codenode> (39)
        on left: 2 3
        on right: 1 2
    statements <codenode> (40)
        on left: 4 5
        on right: 4 15 16 19 26
    statement <codenode> (41)
        on left: 6 7 8 9 10 11 12 13 14
        on right: 4
    if_statement <double> (42)
        on left: 15
        on right: 10
    else_statement <double> (43)
        on left: 16 17
        on right: 15
    return_statement <codenode> (44)
        on left: 18
        on right: 9
    function_decleration <codenode> (45)
        on left: 19
        on right: 2
    var_decleration <codenode> (46)
        on left: 20
        on right: 6
    var_assigment <codenode> (47)
        on left: 21
        on right: 7
    expression <codenode> (48)
        on left: 22
        on right: 18 25
    bool_expression <double> (49)
        on left: 23
        on right: 15 26
    print_statement <codenode> (50)
        on left: 24
        on right: 8
    read_statement <double> (51)
        on left: 25
        on right: 11
    while_statement <double> (52)
        on left: 26
        on right: 12


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function_declerations)

    program                go to state 1
    function_declerations  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function_declerations •
    2 function_declerations: function_declerations • function_decleration

    FUNC  shift, and go to state 4

    $default  reduce using rule 1 (program)

    function_decleration  go to state 5


State 3

    0 $accept: program $end •

    $default  accept


State 4

   19 function_decleration: FUNC • IDENTIFIER L_PAR R_PAR L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 6


State 5

    2 function_declerations: function_declerations function_decleration •

    $default  reduce using rule 2 (function_declerations)


State 6

   19 function_decleration: FUNC IDENTIFIER • L_PAR R_PAR L_CURLY statements R_CURLY

    L_PAR  shift, and go to state 7


State 7

   19 function_decleration: FUNC IDENTIFIER L_PAR • R_PAR L_CURLY statements R_CURLY

    R_PAR  shift, and go to state 8


State 8

   19 function_decleration: FUNC IDENTIFIER L_PAR R_PAR • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 9


State 9

   19 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 10


State 10

    4 statements: statements • statement
   19 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY statements • R_CURLY

    RETURN    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    BREAK     shift, and go to state 14
    CONTINUE  shift, and go to state 15
    READ      shift, and go to state 16
    R_CURLY   shift, and go to state 17

    SEMICOLON  reduce using rule 20 (var_decleration)
    SEMICOLON  [reduce using rule 21 (var_assigment)]
    SEMICOLON  [reduce using rule 24 (print_statement)]
    $default   reduce using rule 20 (var_decleration)

    statement         go to state 18
    if_statement      go to state 19
    return_statement  go to state 20
    var_decleration   go to state 21
    var_assigment     go to state 22
    print_statement   go to state 23
    read_statement    go to state 24
    while_statement   go to state 25


State 11

   18 return_statement: RETURN • expression

    $default  reduce using rule 22 (expression)

    expression  go to state 26


State 12

   26 while_statement: WHILE • L_PAR bool_expression R_PAR L_CURLY statements R_CURLY

    L_PAR  shift, and go to state 27


State 13

   15 if_statement: IF • L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    L_PAR  shift, and go to state 28


State 14

   13 statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 15

   14 statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 30


State 16

   25 read_statement: READ • L_PAR expression R_PAR

    L_PAR  shift, and go to state 31


State 17

   19 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY statements R_CURLY •

    $default  reduce using rule 19 (function_decleration)


State 18

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 19

   10 statement: if_statement •

    $default  reduce using rule 10 (statement)


State 20

    9 statement: return_statement • SEMICOLON

    SEMICOLON  shift, and go to state 32


State 21

    6 statement: var_decleration • SEMICOLON

    SEMICOLON  shift, and go to state 33


State 22

    7 statement: var_assigment • SEMICOLON

    SEMICOLON  shift, and go to state 34


State 23

    8 statement: print_statement • SEMICOLON

    SEMICOLON  shift, and go to state 35


State 24

   11 statement: read_statement • SEMICOLON

    SEMICOLON  shift, and go to state 36


State 25

   12 statement: while_statement •

    $default  reduce using rule 12 (statement)


State 26

   18 return_statement: RETURN expression •

    $default  reduce using rule 18 (return_statement)


State 27

   26 while_statement: WHILE L_PAR • bool_expression R_PAR L_CURLY statements R_CURLY

    $default  reduce using rule 23 (bool_expression)

    bool_expression  go to state 37


State 28

   15 if_statement: IF L_PAR • bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    $default  reduce using rule 23 (bool_expression)

    bool_expression  go to state 38


State 29

   13 statement: BREAK SEMICOLON •

    $default  reduce using rule 13 (statement)


State 30

   14 statement: CONTINUE SEMICOLON •

    $default  reduce using rule 14 (statement)


State 31

   25 read_statement: READ L_PAR • expression R_PAR

    $default  reduce using rule 22 (expression)

    expression  go to state 39


State 32

    9 statement: return_statement SEMICOLON •

    $default  reduce using rule 9 (statement)


State 33

    6 statement: var_decleration SEMICOLON •

    $default  reduce using rule 6 (statement)


State 34

    7 statement: var_assigment SEMICOLON •

    $default  reduce using rule 7 (statement)


State 35

    8 statement: print_statement SEMICOLON •

    $default  reduce using rule 8 (statement)


State 36

   11 statement: read_statement SEMICOLON •

    $default  reduce using rule 11 (statement)


State 37

   26 while_statement: WHILE L_PAR bool_expression • R_PAR L_CURLY statements R_CURLY

    R_PAR  shift, and go to state 40


State 38

   15 if_statement: IF L_PAR bool_expression • R_PAR L_CURLY statements R_CURLY else_statement

    R_PAR  shift, and go to state 41


State 39

   25 read_statement: READ L_PAR expression • R_PAR

    R_PAR  shift, and go to state 42


State 40

   26 while_statement: WHILE L_PAR bool_expression R_PAR • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 43


State 41

   15 if_statement: IF L_PAR bool_expression R_PAR • L_CURLY statements R_CURLY else_statement

    L_CURLY  shift, and go to state 44


State 42

   25 read_statement: READ L_PAR expression R_PAR •

    $default  reduce using rule 25 (read_statement)


State 43

   26 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 45


State 44

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY • statements R_CURLY else_statement

    $default  reduce using rule 5 (statements)

    statements  go to state 46


State 45

    4 statements: statements • statement
   26 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements • R_CURLY

    RETURN    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    BREAK     shift, and go to state 14
    CONTINUE  shift, and go to state 15
    READ      shift, and go to state 16
    R_CURLY   shift, and go to state 47

    SEMICOLON  reduce using rule 20 (var_decleration)
    SEMICOLON  [reduce using rule 21 (var_assigment)]
    SEMICOLON  [reduce using rule 24 (print_statement)]
    $default   reduce using rule 20 (var_decleration)

    statement         go to state 18
    if_statement      go to state 19
    return_statement  go to state 20
    var_decleration   go to state 21
    var_assigment     go to state 22
    print_statement   go to state 23
    read_statement    go to state 24
    while_statement   go to state 25


State 46

    4 statements: statements • statement
   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements • R_CURLY else_statement

    RETURN    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    BREAK     shift, and go to state 14
    CONTINUE  shift, and go to state 15
    READ      shift, and go to state 16
    R_CURLY   shift, and go to state 48

    SEMICOLON  reduce using rule 20 (var_decleration)
    SEMICOLON  [reduce using rule 21 (var_assigment)]
    SEMICOLON  [reduce using rule 24 (print_statement)]
    $default   reduce using rule 20 (var_decleration)

    statement         go to state 18
    if_statement      go to state 19
    return_statement  go to state 20
    var_decleration   go to state 21
    var_assigment     go to state 22
    print_statement   go to state 23
    read_statement    go to state 24
    while_statement   go to state 25


State 47

   26 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements R_CURLY •

    $default  reduce using rule 26 (while_statement)


State 48

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY • else_statement

    ELSE  shift, and go to state 49

    $default  reduce using rule 17 (else_statement)

    else_statement  go to state 50


State 49

   16 else_statement: ELSE • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 51


State 50

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement •

    $default  reduce using rule 15 (if_statement)


State 51

   16 else_statement: ELSE L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 52


State 52

    4 statements: statements • statement
   16 else_statement: ELSE L_CURLY statements • R_CURLY

    RETURN    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    BREAK     shift, and go to state 14
    CONTINUE  shift, and go to state 15
    READ      shift, and go to state 16
    R_CURLY   shift, and go to state 53

    SEMICOLON  reduce using rule 20 (var_decleration)
    SEMICOLON  [reduce using rule 21 (var_assigment)]
    SEMICOLON  [reduce using rule 24 (print_statement)]
    $default   reduce using rule 20 (var_decleration)

    statement         go to state 18
    if_statement      go to state 19
    return_statement  go to state 20
    var_decleration   go to state 21
    var_assigment     go to state 22
    print_statement   go to state 23
    read_statement    go to state 24
    while_statement   go to state 25


State 53

   16 else_statement: ELSE L_CURLY statements R_CURLY •

    $default  reduce using rule 16 (else_statement)
