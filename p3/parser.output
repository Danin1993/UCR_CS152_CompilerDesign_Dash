Terminals unused in grammar

    SUBTRACTION
    ADD
    MULTIPLY
    DIVIDE
    MOD
    NUMBER
    RETURN
    RRETURN
    INT
    PRT
    WHILE
    IF
    ELSE
    BREAK
    CONTINUE
    READ
    SEMICOLON
    COMMA
    L_BRAKET
    R_BRAKET
    ASSIGNMENT
    LESS
    LESS_EQ
    GREATER
    GREATER_EQ
    EQUALITY
    NOT_EQ
    UNKNOWN_TOKEN


Grammar

    0 $accept: program $end

    1 program: function_declerations

    2 function_declerations: function_declerations function_decleration
    3                      | ε

    4 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY R_CURLY


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SUBTRACTION (258)
    ADD (259)
    MULTIPLY (260)
    DIVIDE (261)
    MOD (262)
    L_PAR (263) 4
    R_PAR (264) 4
    NUMBER <op_value> (265)
    IDENTIFIER <op_value> (266) 4
    RETURN (267)
    RRETURN (268)
    INT (269)
    PRT (270)
    FUNC (271) 4
    WHILE (272)
    IF (273)
    ELSE (274)
    BREAK (275)
    CONTINUE (276)
    READ (277)
    SEMICOLON (278)
    COMMA (279)
    L_CURLY (280) 4
    R_CURLY (281) 4
    L_BRAKET (282)
    R_BRAKET (283)
    ASSIGNMENT (284)
    LESS (285)
    LESS_EQ (286)
    GREATER (287)
    GREATER_EQ (288)
    EQUALITY (289)
    NOT_EQ (290)
    UNKNOWN_TOKEN (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function_declerations <codenode> (39)
        on left: 2 3
        on right: 1 2
    function_decleration <codenode> (40)
        on left: 4
        on right: 2


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function_declerations)

    program                go to state 1
    function_declerations  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function_declerations •
    2 function_declerations: function_declerations • function_decleration

    FUNC  shift, and go to state 4

    $default  reduce using rule 1 (program)

    function_decleration  go to state 5


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 function_decleration: FUNC • IDENTIFIER L_PAR R_PAR L_CURLY R_CURLY

    IDENTIFIER  shift, and go to state 6


State 5

    2 function_declerations: function_declerations function_decleration •

    $default  reduce using rule 2 (function_declerations)


State 6

    4 function_decleration: FUNC IDENTIFIER • L_PAR R_PAR L_CURLY R_CURLY

    L_PAR  shift, and go to state 7


State 7

    4 function_decleration: FUNC IDENTIFIER L_PAR • R_PAR L_CURLY R_CURLY

    R_PAR  shift, and go to state 8


State 8

    4 function_decleration: FUNC IDENTIFIER L_PAR R_PAR • L_CURLY R_CURLY

    L_CURLY  shift, and go to state 9


State 9

    4 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY • R_CURLY

    R_CURLY  shift, and go to state 10


State 10

    4 function_decleration: FUNC IDENTIFIER L_PAR R_PAR L_CURLY R_CURLY •

    $default  reduce using rule 4 (function_decleration)
