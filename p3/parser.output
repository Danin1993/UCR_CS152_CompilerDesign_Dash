Nonterminals useless in grammar

    read_statement
    while_statement


Terminals unused in grammar

    RRETURN
    WHILE
    READ
    UNKNOWN_TOKEN


Rules useless in grammar

   52 statement: read_statement SEMICOLON
   53          | while_statement


Grammar

    0 $accept: program $end

    1 program: function_declerations

    2 function_declerations: function_declerations function_decleration
    3                      | ε

    4 statements: statements statement
    5           | ε

    6 statement: var_decleration SEMICOLON
    7          | var_assigment SEMICOLON
    8          | print_statement SEMICOLON
    9          | return_statement SEMICOLON
   10          | if_statement
   11          | BREAK SEMICOLON
   12          | CONTINUE SEMICOLON

   13 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

   14 else_statement: ELSE L_CURLY statements R_CURLY
   15               | ε

   16 comparitors: LESS
   17            | LESS_EQ
   18            | GREATER
   19            | GREATER_EQ
   20            | EQUALITY
   21            | NOT_EQ

   22 return_statement: RETURN expression

   23 var_decleration: INT IDENTIFIER
   24                | INT L_BRAKET NUMBER R_BRAKET IDENTIFIER
   25                | INT IDENTIFIER ASSIGNMENT expression

   26 paramerter_decleration: INT IDENTIFIER
   27                       | INT IDENTIFIER COMMA paramerter_decleration
   28                       | INT L_BRAKET R_BRAKET IDENTIFIER
   29                       | INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration
   30                       | ε

   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

   32 var_assigment: IDENTIFIER ASSIGNMENT expression
   33              | IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression

   34 expression: multiplicative_expr
   35           | multiplicative_expr ADD expression
   36           | multiplicative_expr SUBTRACTION expression

   37 bool_expression: expression comparitors expression

   38 multiplicative_expr: term
   39                    | term MOD multiplicative_expr
   40                    | term MULTIPLY multiplicative_expr
   41                    | term DIVIDE multiplicative_expr

   42 term: L_PAR expression R_PAR
   43     | NUMBER
   44     | IDENTIFIER L_PAR pars R_PAR
   45     | varibles

   46 pars: pars COMMA expression
   47     | expression
   48     | ε

   49 varibles: IDENTIFIER
   50         | IDENTIFIER L_BRAKET NUMBER R_BRAKET

   51 print_statement: PRT L_PAR expression R_PAR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SUBTRACTION (258) 36
    ADD (259) 35
    MULTIPLY (260) 40
    DIVIDE (261) 41
    MOD (262) 39
    L_PAR (263) 13 31 42 44 51
    R_PAR (264) 13 31 42 44 51
    NUMBER <op_value> (265) 24 33 43 50
    IDENTIFIER <op_value> (266) 23 24 25 26 27 28 29 31 32 33 44 49 50
    RETURN (267) 22
    RRETURN (268)
    INT (269) 23 24 25 26 27 28 29
    PRT (270) 51
    FUNC (271) 31
    WHILE (272)
    IF (273) 13
    ELSE (274) 14
    BREAK (275) 11
    CONTINUE (276) 12
    READ (277)
    SEMICOLON (278) 6 7 8 9 11 12
    COMMA (279) 27 29 46
    L_CURLY (280) 13 14 31
    R_CURLY (281) 13 14 31
    L_BRAKET (282) 24 28 29 33 50
    R_BRAKET (283) 24 28 29 33 50
    ASSIGNMENT (284) 25 32 33
    LESS (285) 16
    LESS_EQ (286) 17
    GREATER (287) 18
    GREATER_EQ (288) 19
    EQUALITY (289) 20
    NOT_EQ (290) 21
    UNKNOWN_TOKEN (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function_declerations <codenode> (39)
        on left: 2 3
        on right: 1 2
    statements <codenode> (40)
        on left: 4 5
        on right: 4 13 14 31
    statement <codenode> (41)
        on left: 6 7 8 9 10 11 12
        on right: 4
    if_statement <double> (42)
        on left: 13
        on right: 10
    else_statement <double> (43)
        on left: 14 15
        on right: 13
    comparitors <double> (44)
        on left: 16 17 18 19 20 21
        on right: 37
    return_statement <codenode> (45)
        on left: 22
        on right: 9
    var_decleration <codenode> (46)
        on left: 23 24 25
        on right: 6
    paramerter_decleration <codenode> (47)
        on left: 26 27 28 29 30
        on right: 27 29 31
    function_decleration <codenode> (48)
        on left: 31
        on right: 2
    var_assigment <codenode> (49)
        on left: 32 33
        on right: 7
    expression <codenode> (50)
        on left: 34 35 36
        on right: 22 25 32 33 35 36 37 42 46 47 51
    bool_expression <double> (51)
        on left: 37
        on right: 13
    multiplicative_expr <codenode> (52)
        on left: 38 39 40 41
        on right: 34 35 36 39 40 41
    term <codenode> (53)
        on left: 42 43 44 45
        on right: 38 39 40 41
    pars <codenode> (54)
        on left: 46 47 48
        on right: 44 46
    varibles <codenode> (55)
        on left: 49 50
        on right: 45
    print_statement <codenode> (56)
        on left: 51
        on right: 8


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function_declerations)

    program                go to state 1
    function_declerations  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function_declerations •
    2 function_declerations: function_declerations • function_decleration

    FUNC  shift, and go to state 4

    $default  reduce using rule 1 (program)

    function_decleration  go to state 5


State 3

    0 $accept: program $end •

    $default  accept


State 4

   31 function_decleration: FUNC • IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 6


State 5

    2 function_declerations: function_declerations function_decleration •

    $default  reduce using rule 2 (function_declerations)


State 6

   31 function_decleration: FUNC IDENTIFIER • L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

    L_PAR  shift, and go to state 7


State 7

   31 function_decleration: FUNC IDENTIFIER L_PAR • paramerter_decleration R_PAR L_CURLY statements R_CURLY

    INT  shift, and go to state 8

    $default  reduce using rule 30 (paramerter_decleration)

    paramerter_decleration  go to state 9


State 8

   26 paramerter_decleration: INT • IDENTIFIER
   27                       | INT • IDENTIFIER COMMA paramerter_decleration
   28                       | INT • L_BRAKET R_BRAKET IDENTIFIER
   29                       | INT • L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration

    IDENTIFIER  shift, and go to state 10
    L_BRAKET    shift, and go to state 11


State 9

   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration • R_PAR L_CURLY statements R_CURLY

    R_PAR  shift, and go to state 12


State 10

   26 paramerter_decleration: INT IDENTIFIER •
   27                       | INT IDENTIFIER • COMMA paramerter_decleration

    COMMA  shift, and go to state 13

    $default  reduce using rule 26 (paramerter_decleration)


State 11

   28 paramerter_decleration: INT L_BRAKET • R_BRAKET IDENTIFIER
   29                       | INT L_BRAKET • R_BRAKET IDENTIFIER COMMA paramerter_decleration

    R_BRAKET  shift, and go to state 14


State 12

   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 15


State 13

   27 paramerter_decleration: INT IDENTIFIER COMMA • paramerter_decleration

    INT  shift, and go to state 8

    $default  reduce using rule 30 (paramerter_decleration)

    paramerter_decleration  go to state 16


State 14

   28 paramerter_decleration: INT L_BRAKET R_BRAKET • IDENTIFIER
   29                       | INT L_BRAKET R_BRAKET • IDENTIFIER COMMA paramerter_decleration

    IDENTIFIER  shift, and go to state 17


State 15

   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 18


State 16

   27 paramerter_decleration: INT IDENTIFIER COMMA paramerter_decleration •

    $default  reduce using rule 27 (paramerter_decleration)


State 17

   28 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER •
   29                       | INT L_BRAKET R_BRAKET IDENTIFIER • COMMA paramerter_decleration

    COMMA  shift, and go to state 19

    $default  reduce using rule 28 (paramerter_decleration)


State 18

    4 statements: statements • statement
   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements • R_CURLY

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    IF          shift, and go to state 24
    BREAK       shift, and go to state 25
    CONTINUE    shift, and go to state 26
    R_CURLY     shift, and go to state 27

    statement         go to state 28
    if_statement      go to state 29
    return_statement  go to state 30
    var_decleration   go to state 31
    var_assigment     go to state 32
    print_statement   go to state 33


State 19

   29 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER COMMA • paramerter_decleration

    INT  shift, and go to state 8

    $default  reduce using rule 30 (paramerter_decleration)

    paramerter_decleration  go to state 34


State 20

   32 var_assigment: IDENTIFIER • ASSIGNMENT expression
   33              | IDENTIFIER • L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression

    L_BRAKET    shift, and go to state 35
    ASSIGNMENT  shift, and go to state 36


State 21

   22 return_statement: RETURN • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 40
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 22

   23 var_decleration: INT • IDENTIFIER
   24                | INT • L_BRAKET NUMBER R_BRAKET IDENTIFIER
   25                | INT • IDENTIFIER ASSIGNMENT expression

    IDENTIFIER  shift, and go to state 44
    L_BRAKET    shift, and go to state 45


State 23

   51 print_statement: PRT • L_PAR expression R_PAR

    L_PAR  shift, and go to state 46


State 24

   13 if_statement: IF • L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    L_PAR  shift, and go to state 47


State 25

   11 statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 48


State 26

   12 statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 49


State 27

   31 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY •

    $default  reduce using rule 31 (function_decleration)


State 28

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 29

   10 statement: if_statement •

    $default  reduce using rule 10 (statement)


State 30

    9 statement: return_statement • SEMICOLON

    SEMICOLON  shift, and go to state 50


State 31

    6 statement: var_decleration • SEMICOLON

    SEMICOLON  shift, and go to state 51


State 32

    7 statement: var_assigment • SEMICOLON

    SEMICOLON  shift, and go to state 52


State 33

    8 statement: print_statement • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 34

   29 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration •

    $default  reduce using rule 29 (paramerter_decleration)


State 35

   33 var_assigment: IDENTIFIER L_BRAKET • NUMBER R_BRAKET ASSIGNMENT expression

    NUMBER  shift, and go to state 54


State 36

   32 var_assigment: IDENTIFIER ASSIGNMENT • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 55
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 37

   42 term: L_PAR • expression R_PAR

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 56
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 38

   43 term: NUMBER •

    $default  reduce using rule 43 (term)


State 39

   44 term: IDENTIFIER • L_PAR pars R_PAR
   49 varibles: IDENTIFIER •
   50         | IDENTIFIER • L_BRAKET NUMBER R_BRAKET

    L_PAR     shift, and go to state 57
    L_BRAKET  shift, and go to state 58

    $default  reduce using rule 49 (varibles)


State 40

   22 return_statement: RETURN expression •

    $default  reduce using rule 22 (return_statement)


State 41

   34 expression: multiplicative_expr •
   35           | multiplicative_expr • ADD expression
   36           | multiplicative_expr • SUBTRACTION expression

    SUBTRACTION  shift, and go to state 59
    ADD          shift, and go to state 60

    $default  reduce using rule 34 (expression)


State 42

   38 multiplicative_expr: term •
   39                    | term • MOD multiplicative_expr
   40                    | term • MULTIPLY multiplicative_expr
   41                    | term • DIVIDE multiplicative_expr

    MULTIPLY  shift, and go to state 61
    DIVIDE    shift, and go to state 62
    MOD       shift, and go to state 63

    $default  reduce using rule 38 (multiplicative_expr)


State 43

   45 term: varibles •

    $default  reduce using rule 45 (term)


State 44

   23 var_decleration: INT IDENTIFIER •
   25                | INT IDENTIFIER • ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 64

    $default  reduce using rule 23 (var_decleration)


State 45

   24 var_decleration: INT L_BRAKET • NUMBER R_BRAKET IDENTIFIER

    NUMBER  shift, and go to state 65


State 46

   51 print_statement: PRT L_PAR • expression R_PAR

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 66
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 47

   13 if_statement: IF L_PAR • bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 67
    bool_expression      go to state 68
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 48

   11 statement: BREAK SEMICOLON •

    $default  reduce using rule 11 (statement)


State 49

   12 statement: CONTINUE SEMICOLON •

    $default  reduce using rule 12 (statement)


State 50

    9 statement: return_statement SEMICOLON •

    $default  reduce using rule 9 (statement)


State 51

    6 statement: var_decleration SEMICOLON •

    $default  reduce using rule 6 (statement)


State 52

    7 statement: var_assigment SEMICOLON •

    $default  reduce using rule 7 (statement)


State 53

    8 statement: print_statement SEMICOLON •

    $default  reduce using rule 8 (statement)


State 54

   33 var_assigment: IDENTIFIER L_BRAKET NUMBER • R_BRAKET ASSIGNMENT expression

    R_BRAKET  shift, and go to state 69


State 55

   32 var_assigment: IDENTIFIER ASSIGNMENT expression •

    $default  reduce using rule 32 (var_assigment)


State 56

   42 term: L_PAR expression • R_PAR

    R_PAR  shift, and go to state 70


State 57

   44 term: IDENTIFIER L_PAR • pars R_PAR

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 48 (pars)

    expression           go to state 71
    multiplicative_expr  go to state 41
    term                 go to state 42
    pars                 go to state 72
    varibles             go to state 43


State 58

   50 varibles: IDENTIFIER L_BRAKET • NUMBER R_BRAKET

    NUMBER  shift, and go to state 73


State 59

   36 expression: multiplicative_expr SUBTRACTION • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 74
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 60

   35 expression: multiplicative_expr ADD • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 75
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 61

   40 multiplicative_expr: term MULTIPLY • multiplicative_expr

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    multiplicative_expr  go to state 76
    term                 go to state 42
    varibles             go to state 43


State 62

   41 multiplicative_expr: term DIVIDE • multiplicative_expr

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    multiplicative_expr  go to state 77
    term                 go to state 42
    varibles             go to state 43


State 63

   39 multiplicative_expr: term MOD • multiplicative_expr

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    multiplicative_expr  go to state 78
    term                 go to state 42
    varibles             go to state 43


State 64

   25 var_decleration: INT IDENTIFIER ASSIGNMENT • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 79
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 65

   24 var_decleration: INT L_BRAKET NUMBER • R_BRAKET IDENTIFIER

    R_BRAKET  shift, and go to state 80


State 66

   51 print_statement: PRT L_PAR expression • R_PAR

    R_PAR  shift, and go to state 81


State 67

   37 bool_expression: expression • comparitors expression

    LESS        shift, and go to state 82
    LESS_EQ     shift, and go to state 83
    GREATER     shift, and go to state 84
    GREATER_EQ  shift, and go to state 85
    EQUALITY    shift, and go to state 86
    NOT_EQ      shift, and go to state 87

    comparitors  go to state 88


State 68

   13 if_statement: IF L_PAR bool_expression • R_PAR L_CURLY statements R_CURLY else_statement

    R_PAR  shift, and go to state 89


State 69

   33 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET • ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 90


State 70

   42 term: L_PAR expression R_PAR •

    $default  reduce using rule 42 (term)


State 71

   47 pars: expression •

    $default  reduce using rule 47 (pars)


State 72

   44 term: IDENTIFIER L_PAR pars • R_PAR
   46 pars: pars • COMMA expression

    R_PAR  shift, and go to state 91
    COMMA  shift, and go to state 92


State 73

   50 varibles: IDENTIFIER L_BRAKET NUMBER • R_BRAKET

    R_BRAKET  shift, and go to state 93


State 74

   36 expression: multiplicative_expr SUBTRACTION expression •

    $default  reduce using rule 36 (expression)


State 75

   35 expression: multiplicative_expr ADD expression •

    $default  reduce using rule 35 (expression)


State 76

   40 multiplicative_expr: term MULTIPLY multiplicative_expr •

    $default  reduce using rule 40 (multiplicative_expr)


State 77

   41 multiplicative_expr: term DIVIDE multiplicative_expr •

    $default  reduce using rule 41 (multiplicative_expr)


State 78

   39 multiplicative_expr: term MOD multiplicative_expr •

    $default  reduce using rule 39 (multiplicative_expr)


State 79

   25 var_decleration: INT IDENTIFIER ASSIGNMENT expression •

    $default  reduce using rule 25 (var_decleration)


State 80

   24 var_decleration: INT L_BRAKET NUMBER R_BRAKET • IDENTIFIER

    IDENTIFIER  shift, and go to state 94


State 81

   51 print_statement: PRT L_PAR expression R_PAR •

    $default  reduce using rule 51 (print_statement)


State 82

   16 comparitors: LESS •

    $default  reduce using rule 16 (comparitors)


State 83

   17 comparitors: LESS_EQ •

    $default  reduce using rule 17 (comparitors)


State 84

   18 comparitors: GREATER •

    $default  reduce using rule 18 (comparitors)


State 85

   19 comparitors: GREATER_EQ •

    $default  reduce using rule 19 (comparitors)


State 86

   20 comparitors: EQUALITY •

    $default  reduce using rule 20 (comparitors)


State 87

   21 comparitors: NOT_EQ •

    $default  reduce using rule 21 (comparitors)


State 88

   37 bool_expression: expression comparitors • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 95
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 89

   13 if_statement: IF L_PAR bool_expression R_PAR • L_CURLY statements R_CURLY else_statement

    L_CURLY  shift, and go to state 96


State 90

   33 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 97
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 91

   44 term: IDENTIFIER L_PAR pars R_PAR •

    $default  reduce using rule 44 (term)


State 92

   46 pars: pars COMMA • expression

    L_PAR       shift, and go to state 37
    NUMBER      shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression           go to state 98
    multiplicative_expr  go to state 41
    term                 go to state 42
    varibles             go to state 43


State 93

   50 varibles: IDENTIFIER L_BRAKET NUMBER R_BRAKET •

    $default  reduce using rule 50 (varibles)


State 94

   24 var_decleration: INT L_BRAKET NUMBER R_BRAKET IDENTIFIER •

    $default  reduce using rule 24 (var_decleration)


State 95

   37 bool_expression: expression comparitors expression •

    $default  reduce using rule 37 (bool_expression)


State 96

   13 if_statement: IF L_PAR bool_expression R_PAR L_CURLY • statements R_CURLY else_statement

    $default  reduce using rule 5 (statements)

    statements  go to state 99


State 97

   33 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression •

    $default  reduce using rule 33 (var_assigment)


State 98

   46 pars: pars COMMA expression •

    $default  reduce using rule 46 (pars)


State 99

    4 statements: statements • statement
   13 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements • R_CURLY else_statement

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    IF          shift, and go to state 24
    BREAK       shift, and go to state 25
    CONTINUE    shift, and go to state 26
    R_CURLY     shift, and go to state 100

    statement         go to state 28
    if_statement      go to state 29
    return_statement  go to state 30
    var_decleration   go to state 31
    var_assigment     go to state 32
    print_statement   go to state 33


State 100

   13 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY • else_statement

    ELSE  shift, and go to state 101

    $default  reduce using rule 15 (else_statement)

    else_statement  go to state 102


State 101

   14 else_statement: ELSE • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 103


State 102

   13 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement •

    $default  reduce using rule 13 (if_statement)


State 103

   14 else_statement: ELSE L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 104


State 104

    4 statements: statements • statement
   14 else_statement: ELSE L_CURLY statements • R_CURLY

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    IF          shift, and go to state 24
    BREAK       shift, and go to state 25
    CONTINUE    shift, and go to state 26
    R_CURLY     shift, and go to state 105

    statement         go to state 28
    if_statement      go to state 29
    return_statement  go to state 30
    var_decleration   go to state 31
    var_assigment     go to state 32
    print_statement   go to state 33


State 105

   14 else_statement: ELSE L_CURLY statements R_CURLY •

    $default  reduce using rule 14 (else_statement)
