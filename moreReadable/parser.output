Terminals unused in grammar

    RRETURN
    UNKNOWN_TOKEN


Grammar

    0 $accept: funcDecs $end

    1 funcDecs: funcDecs funcDec
    2         | ε

    3 stms: stms stm
    4     | ε

    5 stm: varDec SEMICOLON
    6    | var_assigment SEMICOLON
    7    | print SEMICOLON
    8    | if_stm
    9    | return_stm SEMICOLON
   10    | read_stm SEMICOLON
   11    | while_stm
   12    | BREAK SEMICOLON
   13    | CONTINUE SEMICOLON

   14 if_stm: IF L_PAR bool_expr R_PAR L_CURLY stms R_CURLY else_stm

   15 else_stm: ELSE L_CURLY stms R_CURLY
   16         | ε

   17 compers: LESS
   18        | LESS_EQ
   19        | GREATER
   20        | GREATER_EQ
   21        | EQUALITY
   22        | NOT_EQ

   23 return_stm: RETURN expr

   24 varDec: INT IDENTIFIER
   25       | INT L_BRAKET expr R_BRAKET IDENTIFIER
   26       | INT var_assigment

   27 paramDecs: paramDecs paramDec
   28          | ε

   29 paramDec: INT IDENTIFIER
   30         | INT IDENTIFIER COMMA paramDec
   31         | INT L_BRAKET R_BRAKET IDENTIFIER
   32         | INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramDec

   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs R_PAR L_CURLY stms R_CURLY

   34 var_assigment: varibles ASSIGNMENT expr

   35 expr: mult_expr
   36     | mult_expr ADD mult_expr
   37     | mult_expr SUBTRACTION mult_expr

   38 bool_expr: expr compers expr

   39 mult_expr: term
   40          | term MOD term
   41          | term MULTIPLY term
   42          | term DIVIDE term

   43 term: L_PAR expr R_PAR
   44     | NUMBER
   45     | IDENTIFIER L_PAR pars R_PAR
   46     | varibles

   47 pars: pars COMMA expr
   48     | expr
   49     | ε

   50 varibles: IDENTIFIER
   51         | IDENTIFIER L_BRAKET expr R_BRAKET

   52 print: PRT L_PAR expr R_PAR

   53 read_stm: READ L_PAR expr R_PAR

   54 while_stm: WHILE L_PAR bool_expr R_PAR L_CURLY stms R_CURLY


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SUBTRACTION (258) 37
    ADD (259) 36
    MULTIPLY (260) 41
    DIVIDE (261) 42
    MOD (262) 40
    L_PAR (263) 14 33 43 45 52 53 54
    R_PAR (264) 14 33 43 45 52 53 54
    IDENTIFIER (265) 24 25 29 30 31 32 33 45 50 51
    NUMBER <double> (266) 44
    RETURN (267) 23
    RRETURN (268)
    INT (269) 24 25 26 29 30 31 32
    PRT (270) 52
    FUNC (271) 33
    WHILE (272) 54
    IF (273) 14
    ELSE (274) 15
    BREAK (275) 12
    CONTINUE (276) 13
    READ (277) 53
    SEMICOLON (278) 5 6 7 9 10 12 13
    COMMA (279) 30 32 47
    L_CURLY (280) 14 15 33 54
    R_CURLY (281) 14 15 33 54
    L_BRAKET (282) 25 31 32 51
    R_BRAKET (283) 25 31 32 51
    ASSIGNMENT (284) 34
    LESS (285) 17
    LESS_EQ (286) 18
    GREATER (287) 19
    GREATER_EQ (288) 20
    EQUALITY (289) 21
    NOT_EQ (290) 22
    UNKNOWN_TOKEN (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    funcDecs (38)
        on left: 1 2
        on right: 0 1
    stms <double> (39)
        on left: 3 4
        on right: 3 14 15 33 54
    stm <double> (40)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 3
    if_stm <double> (41)
        on left: 14
        on right: 8
    else_stm <double> (42)
        on left: 15 16
        on right: 14
    compers <double> (43)
        on left: 17 18 19 20 21 22
        on right: 38
    return_stm <double> (44)
        on left: 23
        on right: 9
    varDec <double> (45)
        on left: 24 25 26
        on right: 5
    paramDecs <double> (46)
        on left: 27 28
        on right: 27 33
    paramDec (47)
        on left: 29 30 31 32
        on right: 27 30 32
    funcDec <double> (48)
        on left: 33
        on right: 1
    var_assigment <double> (49)
        on left: 34
        on right: 6 26
    expr <double> (50)
        on left: 35 36 37
        on right: 23 25 34 38 43 47 48 51 52 53
    bool_expr <double> (51)
        on left: 38
        on right: 14 54
    mult_expr <double> (52)
        on left: 39 40 41 42
        on right: 35 36 37
    term <double> (53)
        on left: 43 44 45 46
        on right: 39 40 41 42
    pars <double> (54)
        on left: 47 48 49
        on right: 45 47
    varibles <double> (55)
        on left: 50 51
        on right: 34 46
    print (56)
        on left: 52
        on right: 7
    read_stm <double> (57)
        on left: 53
        on right: 10
    while_stm <double> (58)
        on left: 54
        on right: 11


State 0

    0 $accept: • funcDecs $end

    $default  reduce using rule 2 (funcDecs)

    funcDecs  go to state 1


State 1

    0 $accept: funcDecs • $end
    1 funcDecs: funcDecs • funcDec

    $end  shift, and go to state 2
    FUNC  shift, and go to state 3

    funcDec  go to state 4


State 2

    0 $accept: funcDecs $end •

    $default  accept


State 3

   33 funcDec: FUNC • IDENTIFIER L_PAR paramDecs R_PAR L_CURLY stms R_CURLY

    IDENTIFIER  shift, and go to state 5


State 4

    1 funcDecs: funcDecs funcDec •

    $default  reduce using rule 1 (funcDecs)


State 5

   33 funcDec: FUNC IDENTIFIER • L_PAR paramDecs R_PAR L_CURLY stms R_CURLY

    L_PAR  shift, and go to state 6


State 6

   33 funcDec: FUNC IDENTIFIER L_PAR • paramDecs R_PAR L_CURLY stms R_CURLY

    $default  reduce using rule 28 (paramDecs)

    paramDecs  go to state 7


State 7

   27 paramDecs: paramDecs • paramDec
   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs • R_PAR L_CURLY stms R_CURLY

    R_PAR  shift, and go to state 8
    INT    shift, and go to state 9

    paramDec  go to state 10


State 8

   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs R_PAR • L_CURLY stms R_CURLY

    L_CURLY  shift, and go to state 11


State 9

   29 paramDec: INT • IDENTIFIER
   30         | INT • IDENTIFIER COMMA paramDec
   31         | INT • L_BRAKET R_BRAKET IDENTIFIER
   32         | INT • L_BRAKET R_BRAKET IDENTIFIER COMMA paramDec

    IDENTIFIER  shift, and go to state 12
    L_BRAKET    shift, and go to state 13


State 10

   27 paramDecs: paramDecs paramDec •

    $default  reduce using rule 27 (paramDecs)


State 11

   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs R_PAR L_CURLY • stms R_CURLY

    $default  reduce using rule 4 (stms)

    stms  go to state 14


State 12

   29 paramDec: INT IDENTIFIER •
   30         | INT IDENTIFIER • COMMA paramDec

    COMMA  shift, and go to state 15

    $default  reduce using rule 29 (paramDec)


State 13

   31 paramDec: INT L_BRAKET • R_BRAKET IDENTIFIER
   32         | INT L_BRAKET • R_BRAKET IDENTIFIER COMMA paramDec

    R_BRAKET  shift, and go to state 16


State 14

    3 stms: stms • stm
   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs R_PAR L_CURLY stms • R_CURLY

    IDENTIFIER  shift, and go to state 17
    RETURN      shift, and go to state 18
    INT         shift, and go to state 19
    PRT         shift, and go to state 20
    WHILE       shift, and go to state 21
    IF          shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    READ        shift, and go to state 25
    R_CURLY     shift, and go to state 26

    stm            go to state 27
    if_stm         go to state 28
    return_stm     go to state 29
    varDec         go to state 30
    var_assigment  go to state 31
    varibles       go to state 32
    print          go to state 33
    read_stm       go to state 34
    while_stm      go to state 35


State 15

   30 paramDec: INT IDENTIFIER COMMA • paramDec

    INT  shift, and go to state 9

    paramDec  go to state 36


State 16

   31 paramDec: INT L_BRAKET R_BRAKET • IDENTIFIER
   32         | INT L_BRAKET R_BRAKET • IDENTIFIER COMMA paramDec

    IDENTIFIER  shift, and go to state 37


State 17

   50 varibles: IDENTIFIER •
   51         | IDENTIFIER • L_BRAKET expr R_BRAKET

    L_BRAKET  shift, and go to state 38

    $default  reduce using rule 50 (varibles)


State 18

   23 return_stm: RETURN • expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 42
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 19

   24 varDec: INT • IDENTIFIER
   25       | INT • L_BRAKET expr R_BRAKET IDENTIFIER
   26       | INT • var_assigment

    IDENTIFIER  shift, and go to state 46
    L_BRAKET    shift, and go to state 47

    var_assigment  go to state 48
    varibles       go to state 32


State 20

   52 print: PRT • L_PAR expr R_PAR

    L_PAR  shift, and go to state 49


State 21

   54 while_stm: WHILE • L_PAR bool_expr R_PAR L_CURLY stms R_CURLY

    L_PAR  shift, and go to state 50


State 22

   14 if_stm: IF • L_PAR bool_expr R_PAR L_CURLY stms R_CURLY else_stm

    L_PAR  shift, and go to state 51


State 23

   12 stm: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 52


State 24

   13 stm: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 25

   53 read_stm: READ • L_PAR expr R_PAR

    L_PAR  shift, and go to state 54


State 26

   33 funcDec: FUNC IDENTIFIER L_PAR paramDecs R_PAR L_CURLY stms R_CURLY •

    $default  reduce using rule 33 (funcDec)


State 27

    3 stms: stms stm •

    $default  reduce using rule 3 (stms)


State 28

    8 stm: if_stm •

    $default  reduce using rule 8 (stm)


State 29

    9 stm: return_stm • SEMICOLON

    SEMICOLON  shift, and go to state 55


State 30

    5 stm: varDec • SEMICOLON

    SEMICOLON  shift, and go to state 56


State 31

    6 stm: var_assigment • SEMICOLON

    SEMICOLON  shift, and go to state 57


State 32

   34 var_assigment: varibles • ASSIGNMENT expr

    ASSIGNMENT  shift, and go to state 58


State 33

    7 stm: print • SEMICOLON

    SEMICOLON  shift, and go to state 59


State 34

   10 stm: read_stm • SEMICOLON

    SEMICOLON  shift, and go to state 60


State 35

   11 stm: while_stm •

    $default  reduce using rule 11 (stm)


State 36

   30 paramDec: INT IDENTIFIER COMMA paramDec •

    $default  reduce using rule 30 (paramDec)


State 37

   31 paramDec: INT L_BRAKET R_BRAKET IDENTIFIER •
   32         | INT L_BRAKET R_BRAKET IDENTIFIER • COMMA paramDec

    COMMA  shift, and go to state 61

    $default  reduce using rule 31 (paramDec)


State 38

   51 varibles: IDENTIFIER L_BRAKET • expr R_BRAKET

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 62
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 39

   43 term: L_PAR • expr R_PAR

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 63
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 40

   45 term: IDENTIFIER • L_PAR pars R_PAR
   50 varibles: IDENTIFIER •
   51         | IDENTIFIER • L_BRAKET expr R_BRAKET

    L_PAR     shift, and go to state 64
    L_BRAKET  shift, and go to state 38

    $default  reduce using rule 50 (varibles)


State 41

   44 term: NUMBER •

    $default  reduce using rule 44 (term)


State 42

   23 return_stm: RETURN expr •

    $default  reduce using rule 23 (return_stm)


State 43

   35 expr: mult_expr •
   36     | mult_expr • ADD mult_expr
   37     | mult_expr • SUBTRACTION mult_expr

    SUBTRACTION  shift, and go to state 65
    ADD          shift, and go to state 66

    $default  reduce using rule 35 (expr)


State 44

   39 mult_expr: term •
   40          | term • MOD term
   41          | term • MULTIPLY term
   42          | term • DIVIDE term

    MULTIPLY  shift, and go to state 67
    DIVIDE    shift, and go to state 68
    MOD       shift, and go to state 69

    $default  reduce using rule 39 (mult_expr)


State 45

   46 term: varibles •

    $default  reduce using rule 46 (term)


State 46

   24 varDec: INT IDENTIFIER •
   50 varibles: IDENTIFIER •
   51         | IDENTIFIER • L_BRAKET expr R_BRAKET

    L_BRAKET  shift, and go to state 38

    ASSIGNMENT  reduce using rule 50 (varibles)
    $default    reduce using rule 24 (varDec)


State 47

   25 varDec: INT L_BRAKET • expr R_BRAKET IDENTIFIER

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 70
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 48

   26 varDec: INT var_assigment •

    $default  reduce using rule 26 (varDec)


State 49

   52 print: PRT L_PAR • expr R_PAR

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 71
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 50

   54 while_stm: WHILE L_PAR • bool_expr R_PAR L_CURLY stms R_CURLY

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 72
    bool_expr  go to state 73
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 51

   14 if_stm: IF L_PAR • bool_expr R_PAR L_CURLY stms R_CURLY else_stm

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 72
    bool_expr  go to state 74
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 52

   12 stm: BREAK SEMICOLON •

    $default  reduce using rule 12 (stm)


State 53

   13 stm: CONTINUE SEMICOLON •

    $default  reduce using rule 13 (stm)


State 54

   53 read_stm: READ L_PAR • expr R_PAR

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 75
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 55

    9 stm: return_stm SEMICOLON •

    $default  reduce using rule 9 (stm)


State 56

    5 stm: varDec SEMICOLON •

    $default  reduce using rule 5 (stm)


State 57

    6 stm: var_assigment SEMICOLON •

    $default  reduce using rule 6 (stm)


State 58

   34 var_assigment: varibles ASSIGNMENT • expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 76
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 59

    7 stm: print SEMICOLON •

    $default  reduce using rule 7 (stm)


State 60

   10 stm: read_stm SEMICOLON •

    $default  reduce using rule 10 (stm)


State 61

   32 paramDec: INT L_BRAKET R_BRAKET IDENTIFIER COMMA • paramDec

    INT  shift, and go to state 9

    paramDec  go to state 77


State 62

   51 varibles: IDENTIFIER L_BRAKET expr • R_BRAKET

    R_BRAKET  shift, and go to state 78


State 63

   43 term: L_PAR expr • R_PAR

    R_PAR  shift, and go to state 79


State 64

   45 term: IDENTIFIER L_PAR • pars R_PAR

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    $default  reduce using rule 49 (pars)

    expr       go to state 80
    mult_expr  go to state 43
    term       go to state 44
    pars       go to state 81
    varibles   go to state 45


State 65

   37 expr: mult_expr SUBTRACTION • mult_expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    mult_expr  go to state 82
    term       go to state 44
    varibles   go to state 45


State 66

   36 expr: mult_expr ADD • mult_expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    mult_expr  go to state 83
    term       go to state 44
    varibles   go to state 45


State 67

   41 mult_expr: term MULTIPLY • term

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    term      go to state 84
    varibles  go to state 45


State 68

   42 mult_expr: term DIVIDE • term

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    term      go to state 85
    varibles  go to state 45


State 69

   40 mult_expr: term MOD • term

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    term      go to state 86
    varibles  go to state 45


State 70

   25 varDec: INT L_BRAKET expr • R_BRAKET IDENTIFIER

    R_BRAKET  shift, and go to state 87


State 71

   52 print: PRT L_PAR expr • R_PAR

    R_PAR  shift, and go to state 88


State 72

   38 bool_expr: expr • compers expr

    LESS        shift, and go to state 89
    LESS_EQ     shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    EQUALITY    shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    compers  go to state 95


State 73

   54 while_stm: WHILE L_PAR bool_expr • R_PAR L_CURLY stms R_CURLY

    R_PAR  shift, and go to state 96


State 74

   14 if_stm: IF L_PAR bool_expr • R_PAR L_CURLY stms R_CURLY else_stm

    R_PAR  shift, and go to state 97


State 75

   53 read_stm: READ L_PAR expr • R_PAR

    R_PAR  shift, and go to state 98


State 76

   34 var_assigment: varibles ASSIGNMENT expr •

    $default  reduce using rule 34 (var_assigment)


State 77

   32 paramDec: INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramDec •

    $default  reduce using rule 32 (paramDec)


State 78

   51 varibles: IDENTIFIER L_BRAKET expr R_BRAKET •

    $default  reduce using rule 51 (varibles)


State 79

   43 term: L_PAR expr R_PAR •

    $default  reduce using rule 43 (term)


State 80

   48 pars: expr •

    $default  reduce using rule 48 (pars)


State 81

   45 term: IDENTIFIER L_PAR pars • R_PAR
   47 pars: pars • COMMA expr

    R_PAR  shift, and go to state 99
    COMMA  shift, and go to state 100


State 82

   37 expr: mult_expr SUBTRACTION mult_expr •

    $default  reduce using rule 37 (expr)


State 83

   36 expr: mult_expr ADD mult_expr •

    $default  reduce using rule 36 (expr)


State 84

   41 mult_expr: term MULTIPLY term •

    $default  reduce using rule 41 (mult_expr)


State 85

   42 mult_expr: term DIVIDE term •

    $default  reduce using rule 42 (mult_expr)


State 86

   40 mult_expr: term MOD term •

    $default  reduce using rule 40 (mult_expr)


State 87

   25 varDec: INT L_BRAKET expr R_BRAKET • IDENTIFIER

    IDENTIFIER  shift, and go to state 101


State 88

   52 print: PRT L_PAR expr R_PAR •

    $default  reduce using rule 52 (print)


State 89

   17 compers: LESS •

    $default  reduce using rule 17 (compers)


State 90

   18 compers: LESS_EQ •

    $default  reduce using rule 18 (compers)


State 91

   19 compers: GREATER •

    $default  reduce using rule 19 (compers)


State 92

   20 compers: GREATER_EQ •

    $default  reduce using rule 20 (compers)


State 93

   21 compers: EQUALITY •

    $default  reduce using rule 21 (compers)


State 94

   22 compers: NOT_EQ •

    $default  reduce using rule 22 (compers)


State 95

   38 bool_expr: expr compers • expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 102
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 96

   54 while_stm: WHILE L_PAR bool_expr R_PAR • L_CURLY stms R_CURLY

    L_CURLY  shift, and go to state 103


State 97

   14 if_stm: IF L_PAR bool_expr R_PAR • L_CURLY stms R_CURLY else_stm

    L_CURLY  shift, and go to state 104


State 98

   53 read_stm: READ L_PAR expr R_PAR •

    $default  reduce using rule 53 (read_stm)


State 99

   45 term: IDENTIFIER L_PAR pars R_PAR •

    $default  reduce using rule 45 (term)


State 100

   47 pars: pars COMMA • expr

    L_PAR       shift, and go to state 39
    IDENTIFIER  shift, and go to state 40
    NUMBER      shift, and go to state 41

    expr       go to state 105
    mult_expr  go to state 43
    term       go to state 44
    varibles   go to state 45


State 101

   25 varDec: INT L_BRAKET expr R_BRAKET IDENTIFIER •

    $default  reduce using rule 25 (varDec)


State 102

   38 bool_expr: expr compers expr •

    $default  reduce using rule 38 (bool_expr)


State 103

   54 while_stm: WHILE L_PAR bool_expr R_PAR L_CURLY • stms R_CURLY

    $default  reduce using rule 4 (stms)

    stms  go to state 106


State 104

   14 if_stm: IF L_PAR bool_expr R_PAR L_CURLY • stms R_CURLY else_stm

    $default  reduce using rule 4 (stms)

    stms  go to state 107


State 105

   47 pars: pars COMMA expr •

    $default  reduce using rule 47 (pars)


State 106

    3 stms: stms • stm
   54 while_stm: WHILE L_PAR bool_expr R_PAR L_CURLY stms • R_CURLY

    IDENTIFIER  shift, and go to state 17
    RETURN      shift, and go to state 18
    INT         shift, and go to state 19
    PRT         shift, and go to state 20
    WHILE       shift, and go to state 21
    IF          shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    READ        shift, and go to state 25
    R_CURLY     shift, and go to state 108

    stm            go to state 27
    if_stm         go to state 28
    return_stm     go to state 29
    varDec         go to state 30
    var_assigment  go to state 31
    varibles       go to state 32
    print          go to state 33
    read_stm       go to state 34
    while_stm      go to state 35


State 107

    3 stms: stms • stm
   14 if_stm: IF L_PAR bool_expr R_PAR L_CURLY stms • R_CURLY else_stm

    IDENTIFIER  shift, and go to state 17
    RETURN      shift, and go to state 18
    INT         shift, and go to state 19
    PRT         shift, and go to state 20
    WHILE       shift, and go to state 21
    IF          shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    READ        shift, and go to state 25
    R_CURLY     shift, and go to state 109

    stm            go to state 27
    if_stm         go to state 28
    return_stm     go to state 29
    varDec         go to state 30
    var_assigment  go to state 31
    varibles       go to state 32
    print          go to state 33
    read_stm       go to state 34
    while_stm      go to state 35


State 108

   54 while_stm: WHILE L_PAR bool_expr R_PAR L_CURLY stms R_CURLY •

    $default  reduce using rule 54 (while_stm)


State 109

   14 if_stm: IF L_PAR bool_expr R_PAR L_CURLY stms R_CURLY • else_stm

    ELSE  shift, and go to state 110

    $default  reduce using rule 16 (else_stm)

    else_stm  go to state 111


State 110

   15 else_stm: ELSE • L_CURLY stms R_CURLY

    L_CURLY  shift, and go to state 112


State 111

   14 if_stm: IF L_PAR bool_expr R_PAR L_CURLY stms R_CURLY else_stm •

    $default  reduce using rule 14 (if_stm)


State 112

   15 else_stm: ELSE L_CURLY • stms R_CURLY

    $default  reduce using rule 4 (stms)

    stms  go to state 113


State 113

    3 stms: stms • stm
   15 else_stm: ELSE L_CURLY stms • R_CURLY

    IDENTIFIER  shift, and go to state 17
    RETURN      shift, and go to state 18
    INT         shift, and go to state 19
    PRT         shift, and go to state 20
    WHILE       shift, and go to state 21
    IF          shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    READ        shift, and go to state 25
    R_CURLY     shift, and go to state 114

    stm            go to state 27
    if_stm         go to state 28
    return_stm     go to state 29
    varDec         go to state 30
    var_assigment  go to state 31
    varibles       go to state 32
    print          go to state 33
    read_stm       go to state 34
    while_stm      go to state 35


State 114

   15 else_stm: ELSE L_CURLY stms R_CURLY •

    $default  reduce using rule 15 (else_stm)
